/*
 * MIT License
 *
 * Copyright (c) [2020] [Semchenko Aleksandr]
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package kaspersky

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
)

//	UpdComps Class Reference
//	Class provides means to manage updatable components (bases).
//
//	List of all members.
type UpdComps service

type AsyncUpdateParams struct {
	UPParams UPParams `json:"pParams"`
}

type UPParams struct {
	ArrCategoryFilter []string `json:"arrCategoryFilter"`
	BDoUpdate         bool     `json:"bDoUpdate"`
}

//	Requests asynchronous bases update or retranslation.
//
//	Parameters:
//	- pParams	(params) Update operation parameters (see Universal update task parameters).
//
//	Returns:
//	- (string) Unique auto-generated request identifier of new asynchronous update operation (GUID).
//
//	Note:
//	Semantically is completely identical to UpdateAsync() function.
func (uc *UpdComps) AsyncUpdate(ctx context.Context, params AsyncUpdateParams) ([]byte, error) {
	postData, _ := json.Marshal(params)
	request, err := http.NewRequest("POST", uc.client.Server+"/api/v1.0/UpdComps.AsyncUpdate", bytes.NewBuffer(postData))
	if err != nil {
		return nil, err
	}

	raw, err := uc.client.Do(ctx, request, nil)
	return raw, err
}

//	Stops operation by request.
//
//	Parameters:
//	- wsRequestId	(string) Request identifier of one of the operations, started before.
//	- bWait			(bool) Whether to wait for actual operation stop in blocking way
//	(true) or just initiate asynchronous stop and return back ASAP (false).
//
//	Note:
//	Function does not throw an exception intentionally if wrong,
//	inexistent or "expired" request id is used (just does nothing in this case).
func (uc *UpdComps) Stop(ctx context.Context, wsRequestId string, bWait bool) ([]byte, error) {
	postData := []byte(fmt.Sprintf(`{"wsRequestId": "%s", "bWait": %v}`, wsRequestId, bWait))
	request, err := http.NewRequest("POST", uc.client.Server+"/api/v1.0/UpdComps.Stop", bytes.NewBuffer(postData))
	if err != nil {
		return nil, err
	}

	raw, err := uc.client.Do(ctx, request, nil)
	return raw, err
}

type UpdateAsyncParams struct {
	UAParams    UAParams `json:"pParams"`
	WsRequestId string   `json:"wsRequestId"`
}

type UAParams struct {
	ArrCategoryFilter []string `json:"arrCategoryFilter"`
	BDoUpdate         bool     `json:"bDoUpdate"`
}

//	Requests asynchronous bases update or retranslation.
//
//	Parameters:
//	- pParams		(params) Update operation parameters (see Universal update task parameters).
//	- wsRequestId	(string) Unique user-generated request identifier of new asynchronous update operation.
//
//	Note:
//	This call is asynchronous about long update operation,
//	but it may wait for up2date component start in blocking way if component isn't yet started (several minutes maximum).
//
//	Note:
//	Async events, generated by the call, have type KLEV::c_EventAsyncState ("KLEV_EventAsyncState").
//	Event params includes the following parameters:
//	- KLEV::c_evpAsyncRequestId ("KLEV_AsyncRequestId")
//	- KLEV::c_evpAsyncRequestResult ("KLEV_AsyncRequestResult")
//	- KLEV::c_evpAsyncRequestPercentComplete ("KLEV_AsyncRequestPercentComplete")
//	- KLEV::c_evpAsyncRequestError ("KLEV_AsyncRequestError")
//
//	Note:
//	The simplest way to update some bases is to set "arrCategoryFilter" parameter - component list to update.
//	Remember, KL-servers are used by default with KSC proxy settings (if any).
//	Also do not forget to set desired operation - update or retranslation - via "bDoUpdate" parameter.
func (uc *UpdComps) UpdateAsync(ctx context.Context, params UpdateAsyncParams) ([]byte, error) {
	postData, _ := json.Marshal(params)
	request, err := http.NewRequest("POST", uc.client.Server+"/api/v1.0/UpdComps.UpdateAsync", bytes.NewBuffer(postData))
	if err != nil {
		return nil, err
	}

	raw, err := uc.client.Do(ctx, request, nil)
	return raw, err
}
